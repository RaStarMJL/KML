import { watch } from "fs"

<template>
  <scroll-view v-if="outContent !== ''" class="outContent" scroll-y>
    <text class="out-text">{{ localOutContent }}</text>
  </scroll-view>
  <view
    ref="ball"
    :style="{
      right: startPosition.right + 'px',
      bottom: startPosition.bottom + 'px',
    }"
    class="ball"
    @touchstart="start">
    <image
      src="/src/static/images/agent.gif"
      style="width: 80px; height: 80px" />
  </view>
  <uni-popup ref="popup" type="bottom">
    <view class="popup-container" :style="popupStyle">
      <!-- 头部 -->
      <view class="header">
        <view class="item1">
          <uni-icons
            v-if="!isDialoging"
            type="more-filled"
            color=""
            size="20" />
          <uni-icons
            v-else
            type="arrow-left"
            color=""
            size="24"
            @tap="goBack" />
        </view>
        <view class="item2"><text class="title">智能会议小助手</text></view>
        <view class="item3">
          <view
            ><image
              src="/src/static/icons/common/amplify.png"
              mode="scaleToFill"
              style="width: 20px; height: 20px"
          /></view>
          <view
            ><uni-icons
              type="closeempty"
              color=""
              size="20"
              @tap="closePopup" />
          </view>
        </view>
      </view>

      <!-- 主要内容 -->
      <!-- 主要内容 -->
      <view class="main-content">
        <view class="content" v-if="showContent">
          <view class="text-header">
            <text class="greeting"
              >{{ userName }} 晚上好，\n邀请您体验“AI小助手”</text
            >
            <!-- <text class="sub-title">每小时{{ limitCount }}次</text> -->
          </view>
          <!-- 自动问答提示列表 -->
          <view class="func-list">
            <view
              class="func-item"
              v-for="(item, index) in funcItems"
              @tap="sendQuickMessage(item)"
              :key="index">
              {{ item }}
            </view>
          </view>
        </view>
        <!-- 聊天内容区域 -->
        <scroll-view
          scroll-y
          class="chat-messages"
          :scroll-top="scrollTop"
          @scrolltolower="onScrollToLower"
          :scroll-with-animation="true"
          :show-scrollbar="false"
          ref="messagesScroll"
          id="chat-scroll">
          <view class="chat-list" id="chat-list">
            <!-- 遍历所有消息，不再通过v-if区分类型 -->
            <view
              v-for="(message, index) in messages"
              :key="message.type + '-' + index"
              :class="[
                'message',
                message.type === 'ai' ? 'ai-message' : 'user-message',
              ]">
              <!-- AI消息的头像 -->
              <image
                v-if="message.type === 'ai'"
                class="avatar"
                :src="aiAvatar"
                mode="aspectFill"></image>

              <view class="message-content">
                <view class="message-bubble">
                  <image
                    class="loading-image"
                    v-if="message.loading"
                    src="/src/static/images/loading.gif"
                    mode="scaleToFill" />
                  <text v-else>{{ message.content }}</text>
                </view>

                <!-- 仅AI消息显示操作按钮 -->
                <view v-if="message.type === 'ai'" class="message-actions">
                  <view
                    class="action-btn"
                    @click="copyMessage(message.content)">
                    <uni-icons
                      type="upload"
                      size="16"
                      color="#8a8a8a"></uni-icons>
                  </view>
                  <view class="action-btn" @click="likeMessage(index)">
                    <uni-icons
                      type="hand-up"
                      size="16"
                      :color="
                        message.liked ? '#4080FF' : '#8a8a8a'
                      "></uni-icons>
                  </view>
                  <view class="action-btn" @click="dislikeMessage(index)">
                    <uni-icons
                      type="hand-down"
                      size="16"
                      :color="
                        message.disliked ? '#ff6666' : '#8a8a8a'
                      "></uni-icons>
                  </view>
                </view>
              </view>
            </view>
          </view>
        </scroll-view>
      </view>

      <!-- 底部说明 -->
      <view class="footer">
        <!-- 搜索提示 -->
        <view class="search-tip">
          <view
            class="item"
            v-for="item in agentList"
            :key="item.id"
            @tap="switchAgent(item.id)"
            :class="{ active: curAgentId === item.id && isDialoging }"
            >{{ item.name }}</view
          >
        </view>
        <view class="search-main">
          <view class="ipt-left">
            <uni-icons
              class="soundBtn"
              type="sound"
              :color="dialogueMode !== 'text' ? '#007aff' : ''"
              size="24"
              @tap="changeDialogueMode" />
          </view>
          <view
            class="ipt-mid"
            :class="{
              text: isFocus && dialogueMode === 'text',
              voice: dialogueMode === 'voice',
            }"
            :style="{
              width: searchIpt !== '' ? '450rpx' : '520rpx',
            }">
            <textarea
              class="ipt"
              @focus="handleFoucs"
              @blur="isFocus = false"
              auto-height="ture"
              v-model="searchIpt"
              :placeholder="placeholder" />
          </view>
          <view class="ipt-right">
            <view
              class="sendBtn"
              v-if="this.searchIpt.length > 0"
              @tap="sendMessage(searchIpt)"
              >发送</view
            >
            <!-- <uni-icons
              class="sendBtn"
              type="paperplane"
              color=""
              size="24"
              @tap="sendMessage(searchIpt)" /> -->
          </view>
        </view>
      </view>
      <text class="tip-text">所有内容由 AI 生成，仅供参考。</text>
    </view>
  </uni-popup>
</template>
<script>
import { baseURL } from "../../src/utils/http";
function getEl(el) {
  if (typeof el === "string" || typeof el === "number") return el;
  if (WXEnvironment) {
    return el.ref;
  } else {
    return el instanceof HTMLElement ? el : el.$el;
  }
}
const BindingX = uni.requireNativePlugin("bindingx");
const dom = weex.requireModule("dom");
/**
 * 吸附按钮
 */
export default {
  props: {
    outContent: {
      //悬浮内容
      type: String,
      default: "",
    },
    marginY: {
      // 纵向边距
      type: Number,
      default: 40,
    },
    marginX: {
      //横向边距
      type: Number,
      default: 20,
    },
  },
  data() {
    return {
      startPosition: {
        // 记录小球开始位置
        right: 10,
        bottom: 650,
      },
      ballInfo: {},
      areaSize: {},
      position: {
        // 记录小球当前位置
        x: 0,
        y: 0,
      },
      isRun: false, //是否处于运动中
      timer: false,
      containerStyle: {},
      limitCount: 10,
      remainCount: 10,
      funcItems: [
        "会上刚刚说了什么？",
        "总结会议内容",
        "AI搜索：深度了解知识点",
        "阅读文件：快速提取摘要",
      ],
      isDialoging: false, //是否正在对话中
      userName: "梦见离", //用户名称
      messages: [
        { type: "ai", content: "你好，我是AI小助手，请问有什么可以帮到您？" },
      ],
      aiAvatar: "/src/static/images/agent.png", // AI头像
      isFocus: false, // 输入框是否聚焦
      searchIpt: "", // 输入框内容
      placeholder: "请输入您的问题", // 输入框占位符
      dialogueMode: "text", // 对话模式：text 文本，voice 语音
      localOutContent: "", // 本地悬浮内容
    };
  },
  watch: {
    outContent(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.localOutContent = "";
        this.playAudioInApp(newVal);
        this.pseudoStreamOutput(newVal);
      }
    },
  },
  mounted() {
    const info = uni.getSystemInfoSync();
    this.popupStyle = {
      width: info.screenWidth + "px",
      height: info.screenHeight * 0.7 + "px",
    };
    this.areaSize = {
      width: info.safeArea.width,
      height: info.safeArea.height,
    };
    this.$nextTick(() => {
      this.getBallInfo();
    });
  },
  methods: {
    // 播放音频
    playAudioInApp(text) {
      const audioUrl = `${baseURL}ai/audioDataToFile?text=${text}`;

      // 直接播放远程音频
      const audioCtx = uni.createInnerAudioContext();
      audioCtx.src = audioUrl;
      audioCtx.play();

      audioCtx.onPlay(() => console.log("开始播放"));
      audioCtx.onError((err) => {
        console.error("播放失败", err);
        uni.showToast({ title: "播放失败", icon: "none" });
      });
    },
    pseudoStreamOutput(content) {
      let index = 0;
      const interval = setInterval(() => {
        if (index < content.length) {
          this.localOutContent += content[index];
          index++;
          // this.chatScrollTop();
        } else {
          clearInterval(interval); // 停止定时器
        }
      }, 20);
    },
    copyMessage(content) {},
    likeMessage() {},
    dislikeMessage() {},
    sendQuickMessage(message) {},
    closePopup() {},
    goBack() {},
    openPopup() {
      this.$refs.popup.open();
    },
    closePopup() {
      this.$refs.popup.close();
    },
    getBallInfo() {
      dom.getComponentRect(this.$refs.ball, (res) => {
        const info = res.size || {};
        this.ballInfo = {
          width: info.width, //小球宽度
          height: info.height, //小球高度
        };
      });
    },
    start(e) {
      if (this.isRun) {
        //小球处于运动中
        return;
      }
      const ball = getEl(this.$refs.ball);

      let obj = BindingX.bind(
        {
          anchor: ball,
          eventType: "pan",
          props: [
            {
              element: ball,
              property: "transform.translateX",
              expression: `x+${this.position.x}`,
            },
            {
              element: ball,
              property: "transform.translateY",
              expression: `y+${this.position.y}`, //
            },
          ],
        },
        (e) => {
          if (e.state === "end") {
            if (this.timer) {
              //移动时间特别短暂 视为点击事件
              this.$emit("clickButton"); //点击事件触发
            }
            BindingX.unbind({
              token: obj.token,
              eventType: "pan",
            });
            //记录小球位置
            this.position.x += e.deltaX;
            this.position.y += e.deltaY;
            console.log("小球位置：", this.position.x, this.position.y);
            //进行吸附
            this.sorption();
          } else {
            this.timer = setTimeout(() => {
              this.timer = null;
            }, 50);
          }
        }
      );
    },
    sorption() {
      //吸附
      this.isRun = true;
      const ball = getEl(this.$refs.ball);
      const time = 230;
      // 判断吸附方向
      const isLeft =
        (this.areaSize.width - this.ballInfo.width + this.marginX) / 2 <
        -this.position.x + this.ballInfo.width; //是否向左吸附
      let moveX = isLeft
        ? -(this.areaSize.width + this.position.x) +
          this.ballInfo.width +
          this.marginX * 2
        : 0 - this.position.x;
      let moveY = 0;
      if (this.position.y > 0) {
        moveY = 0 - this.position.y;
      } else if (
        this.position.y <
        0 - (this.areaSize.height - this.ballInfo.height - this.marginY * 2)
      ) {
        moveY =
          -(this.position.y + (this.areaSize.height - this.ballInfo.height)) +
          this.marginY * 2;
      }
      const expression_x = `easeInOutCubic(t,${this.position.x},${moveX},${time})`;
      const expression_y = `easeInOutCubic(t,${this.position.y},${moveY},${time})`;
      let result = BindingX.bind(
        {
          eventType: "timing",
          exitExpression: `t>=${time}`, //描述什么时候结束
          props: [
            {
              element: ball,
              property: "transform.translateX", //修改的属性
              expression: expression_x,
            },
            {
              element: ball,
              property: "transform.translateY", //修改的属性
              expression: expression_y,
            },
          ],
        },
        (e) => {
          if (e.state === "end" || e.state === "exit") {
            this.isRun = false;
            this.position.x += moveX;
            this.position.y += moveY;
            BindingX.unbind({
              eventType: "timing",
              token: result.gesToken,
            });
          }
        }
      );
    },
  },
};
</script>
<style lang="scss" scoped>
.ball {
  position: fixed;
  bottom: 0;
  overflow: visible;
}
.outContent {
  position: absolute;
  padding: 10rpx;
  overflow: auto;
  border-radius: 10px;
  width: 200px;
  height: 60px;
  opacity: 1;
  top: 105px;
  right: 70px;
  background-color: rgba(0, 0, 0, 0.9);
  .out-text {
    font-size: 12px;
    color: white;
  }
}
.popup-container {
  background: #fff;
  border-radius: 24rpx 24rpx 0 0;
  padding: 32rpx;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  .header {
    background-color: pink;
    display: flex;
    flex-direction: row;
    // padding-bottom: 24rpx;
    border-bottom: 1rpx solid #eee;
    justify-content: space-between;
    align-items: center;
    .item1 {
      display: flex;
      align-items: center;
      justify-content: f;
      background-color: red;
      flex: 1;
    }
    .item2 {
      background-color: blue;
      text-align: center;
      flex: 3;
      .title {
        font-size: 46rpx;
        font-weight: 600;
        color: #333;
      }
    }
    .item3 {
      background-color: yellow;
      display: flex;
      flex-direction: row;
      flex: 1;
      justify-content: space-around;
    }
  }
  .main-content {
    background-color: pink;
    height: 500rpx;
    .content {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      overflow-y: auto;
      padding: 24rpx 0;
      .text-header {
        font-size: 38rpx;
        font-weight: 600;
        .greeting {
          color: #333;
          line-height: 1.5;
          white-space: pre-wrap;
          margin-bottom: 32rpx;
        }
      }
      .func-list {
        margin-top: 24rpx;
        display: flex;
        flex-direction: column;
        gap: 20rpx;
        .func-item {
          font-weight: 500;
          padding: 34rpx;
          background: #f5f5f5;
          border-radius: 16rpx;
          font-size: 28rpx;
          color: #333;
          line-height: 1.4;
        }
      }
    }
  }
  .footer {
    position: relative;
    padding-top: 32rpx;
    .tip-text {
      font-size: 20rpx;
      color: #999;
      line-height: 1.5;
    }
    .close-btn {
      position: absolute;
      right: 0;
      bottom: -16rpx;
      font-size: 28rpx;
      color: #007aff;
      background: transparent;
      padding: 16rpx 32rpx;
    }
  }
}
/* 聊天消息区域 */
.chat-messages {
  height: 50vh;
  padding: 10rpx;
  box-sizing: border-box;
  position: relative;
}

.chat-list {
  display: flex;
  flex-direction: column;
  gap: 15rpx;
}

.message {
  display: flex;
  margin-bottom: 20rpx;
  animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10rpx);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.ai-message {
  align-self: flex-start;
  min-height: 50rpx;
  justify-content: flex-start;
  margin-right: 60rpx;
}

.user-message {
  align-self: flex-end;
  justify-content: flex-end;
  margin-left: 60rpx;
}

.avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 50%;
  margin-right: 20rpx;
  flex-shrink: 0;
  border: 2rpx solid #fff;
  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.1);
}

.message-content {
  display: flex;
  flex-direction: column;
}

.message-bubble {
  min-height: 40rpx;
  max-width: 70vw;
  padding: 24rpx 30rpx;
  border-radius: 18rpx;
  font-size: 28rpx;
  line-height: 1.6;
  word-break: break-word;
  position: relative;
  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.05);
}

.loading-image {
  position: absolute;
  transform: translateY(-15px) translateX(-12px);
  width: 100rpx;
  height: 100rpx;
}

.ai-message .message-bubble {
  background-color: #fff;
  color: #333;
  border-top-left-radius: 4rpx;
}

.ai-message .message-bubble::before {
  content: "";
  position: absolute;
  left: -12rpx;
  top: 20rpx;
  border: 6rpx solid transparent;
  border-right-color: #fff;
}

.user-message .message-bubble {
  background-color: #4080ff;
  color: #fff;
  border-top-right-radius: 4rpx;
  align-self: flex-end;
}

.user-message .message-bubble::before {
  content: "";
  position: absolute;
  right: -12rpx;
  top: 20rpx;
  border: 6rpx solid transparent;
  border-left-color: #4080ff;
}

.message-actions {
  display: flex;
  gap: 30rpx;
  margin-top: 12rpx;
  padding-left: 10rpx;
}

.action-btn {
  opacity: 0.7;
  transition: opacity 0.2s, transform 0.2s;
  padding: 6rpx;
}

.action-btn:active {
  opacity: 1;
  transform: scale(1.1);
}

.footer {
  position: relative;
  border-radius: 25rpx;
  margin-bottom: 20rpx;
  .search-tip {
    border: 1rpx solid #eee;
    border-radius: 25rpx 25rpx 0 0;
    border-bottom: none;
    padding: 20rpx 10rpx 0 10rpx;
    // text-indent: 20rpx;
    display: flex;
    gap: 20rpx;
    align-items: center;
    background-color: #fff;
    font-size: 30rpx;
    .item {
      flex: 1;
      padding: 10rpx 0;
      font-size: 20rpx;
      max-width: 180rpx;
      text-align: center;
      border-radius: 20rpx;
      background-color: #f7f8fa;
      &.active {
        background-color: #007aff;
        color: #fff;
      }
    }
  }
  .search-main {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-end;
    padding: 20rpx 20rpx;
    border: 1rpx solid #eee;
    border-top: none;
    border-radius: 0 0 25rpx 25rpx;
  }
}
</style>
