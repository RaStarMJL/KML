<template>
  <conference-main-view display-mode="permanent"></conference-main-view>
</template>

<script setup lang="ts">
import { onMounted, onUnmounted } from "vue";
import ConferenceMainView from "../TUIRoom/conference.vue";
import router from "../../router/index.ts";
import { useI18n } from "../TUIRoom/locales/index.ts";
import { conference, RoomEvent } from "../TUIRoom/index.ts";
import { ref, provide } from "vue";

const { t } = useI18n();
const roomInfo = uni.getStorageSync("tuiRoom-roomInfo");
const userInfo = uni.getStorageSync("tuiRoom-userInfo");
const route = uni.getStorageSync("routeInfo");
const roomId = String(route.query.roomId as string) ? route.query.roomId : "";
const meetingTitle = String(route.query.meetingTitle as string)
  ? route.query.meetingTitle
  : undefined;
provide("meetingTitle", meetingTitle);
if (!roomId) {
  router.push({ path: "home" });
} else if (!roomInfo) {
  router.push({ path: "home", query: { roomId } });
}

onMounted(async () => {
  const { action, roomMode, isSeatEnabled, roomParam, hasCreated } = JSON.parse(
    roomInfo as string
  );
  const { sdkAppId, userId, userSig, userName, avatarUrl } = JSON.parse(
    userInfo as string
  );
  try {
    await conference.login({ sdkAppId, userId, userSig });
    await conference.setSelfInfo({ userName, avatarUrl });
    if (action === "createRoom" && !hasCreated) {
      console.log("meeingTitle:", meetingTitle);
      // 如果有会议标题，表示是从在议详情界面开始会议
      if (meetingTitle) {
        console.log("有会议标题，表示是从在议详情界面开始会议");
        await conference.start(roomId, {
          roomName: meetingTitle,
          isSeatEnabled,
          ...roomParam,
        });
      }
      // 否则，创建快速会议
      else {
        await conference.start(roomId, {
          roomName: `${userName || userId}${t("Quick Conference")}`,
          isSeatEnabled,
          ...roomParam,
        });
      }
      const newRoomInfo = {
        action,
        roomId,
        roomName: roomId,
        roomMode,
        roomParam,
        hasCreated: true,
      };
      uni.setStorageSync("tuiRoom-roomInfo", JSON.stringify(newRoomInfo));
    } else {
      await conference.join(roomId, roomParam);
    }
  } catch (error: any) {
    uni.removeStorageSync("tuiRoom-currentUserInfo");
  }
});

const backToPage = (page: string, shouldClearUserInfo: boolean) => {
  uni.removeStorageSync("tuiRoom-roomInfo");
  shouldClearUserInfo && sessionStorage.removeItem("tuiRoom-currentUserInfo");
  goToPage(page);
};
const backToHome = () => backToPage("home", false);
const backToHomeAndClearUserInfo = () => backToPage("home", true);
// 房间消失
conference.on(RoomEvent.ROOM_DISMISS, backToHome);
// 离开房间
conference.on(RoomEvent.ROOM_LEAVE, backToHome);
// 被踢出房间
conference.on(RoomEvent.KICKED_OUT, backToHome);
// 房间错误
conference.on(RoomEvent.ROOM_ERROR, backToHome);
// 被踢下线
conference.on(RoomEvent.KICKED_OFFLINE, backToHome);
// 用户 sig 过期
conference.on(RoomEvent.USER_SIG_EXPIRED, backToHomeAndClearUserInfo);
// 用户登出
conference.on(RoomEvent.USER_LOGOUT, backToHomeAndClearUserInfo);

onUnmounted(() => {
  conference.off(RoomEvent.ROOM_DISMISS, backToHome);
  conference.off(RoomEvent.ROOM_LEAVE, backToHome);
  conference.off(RoomEvent.KICKED_OUT, backToHome);
  conference.off(RoomEvent.ROOM_ERROR, backToHome);
  conference.off(RoomEvent.KICKED_OFFLINE, backToHome);
  conference.off(RoomEvent.USER_SIG_EXPIRED, backToHomeAndClearUserInfo);
  conference.off(RoomEvent.USER_LOGOUT, backToHomeAndClearUserInfo);
});

const goToPage = (routePath: string) => {
  router.replace({ path: routePath });
};
</script>

<style lang="scss" scoped></style>
